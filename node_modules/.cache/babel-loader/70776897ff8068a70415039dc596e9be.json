{"ast":null,"code":"var _jsxFileName = \"/Users/lalitkumar/Desktop/Hashedin/React Projects/Assignment-ReactTs/weather-app/src/components/Home/HomeLower.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport CityCard from \"./CityCard\";\nimport \"./Home.css\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction HomeLower() {\n  _s();\n\n  const [cities, setCities] = useState([]);\n  const [search, setSearch] = useState(\"\");\n\n  const allCities = require(\"indian-cities-json\").cities;\n\n  const [suggestedCities, setSuggestion] = useState([]);\n  const node = useRef();\n\n  function loadCities() {\n    let temp = document.getElementById(\"myDropdown\");\n\n    if (temp != null) {\n      temp.style.display = \"block\";\n    }\n  }\n\n  useEffect(() => {\n    var filter;\n    filter = search.toUpperCase();\n    setSuggestion(allCities);\n    let tempCities = [];\n\n    for (let i = 0; i < allCities.length; i++) {\n      let txtValue = allCities[i].name;\n\n      if (txtValue.toUpperCase().indexOf(filter) > -1) {\n        tempCities.push(txtValue);\n      }\n    }\n\n    setSuggestion(tempCities);\n  }, [search, cities]);\n\n  function addCity(myCity) {\n    // console.log(\"The city added is :\"+myCity)\n    let newCity;\n    axios.get(`http://api.openweathermap.org/data/2.5/weather?q=${myCity}&appid=e899757c1162bf7b2b2684a0b2b8f5cc&units=metric`).then(response => {\n      newCity = {\n        name: response.data.name,\n        longitude: response.data.coord.lon,\n        latitude: response.data.coord.lat,\n        temperature: response.data.main.temp,\n        title: response.data.weather[0].main,\n        timestamp: new Date(response.data.dt * 1000)\n      };\n      setCities([...cities, newCity]);\n      console.log(cities);\n    }).catch(error => console.log(error));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: node,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"upperHalf\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Weather App\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"drop-down-menu\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"myInput\",\n          type: \"text\",\n          placeholder: \"Enter your City Name\",\n          onChange: event => setSearch(event.target.value),\n          onClick: () => loadCities(),\n          autoComplete: \"off\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"myDropdown\",\n          className: \"dropdown-content\",\n          children: suggestedCities.map(city => /*#__PURE__*/_jsxDEV(\"div\", {\n            onClick: () => addCity(city),\n            children: city\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"lowerHalf\",\n      children: cities.map(city => /*#__PURE__*/_jsxDEV(CityCard, {\n        city: city\n      }, city.name, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n\n_s(HomeLower, \"4d4Jd5J+r3pcQlzoocDTOnOzPNg=\");\n\n_c = HomeLower;\nexport default HomeLower;\n\nvar _c;\n\n$RefreshReg$(_c, \"HomeLower\");","map":{"version":3,"sources":["/Users/lalitkumar/Desktop/Hashedin/React Projects/Assignment-ReactTs/weather-app/src/components/Home/HomeLower.tsx"],"names":["React","useState","useEffect","useRef","CityCard","axios","HomeLower","cities","setCities","search","setSearch","allCities","require","suggestedCities","setSuggestion","node","loadCities","temp","document","getElementById","style","display","filter","toUpperCase","tempCities","i","length","txtValue","name","indexOf","push","addCity","myCity","newCity","get","then","response","data","longitude","coord","lon","latitude","lat","temperature","main","title","weather","timestamp","Date","dt","console","log","catch","error","event","target","value","map","city"],"mappings":"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","sourcesContent":["import React, { useState, useEffect ,useRef} from \"react\";\nimport CityCard from \"./CityCard\";\nimport \"./Home.css\";\nimport axios from \"axios\";\nimport { City } from \"./CityDTO\";\n\nfunction HomeLower() {\n  const [cities, setCities] = useState<City[]>([]);\n  const [search, setSearch] = useState<string>(\"\");\n  const allCities = require(\"indian-cities-json\").cities;\n  const [suggestedCities, setSuggestion] = useState<string[]>([]);\n  const node=useRef();\n  function loadCities() {\n    let temp = document.getElementById(\"myDropdown\");\n    if (temp != null) {\n      temp.style.display = \"block\";\n    }\n  }\n\n  useEffect(() => {\n    var filter: string;\n    filter = search.toUpperCase();\n    setSuggestion(allCities);\n    let tempCities = [];\n    for (let i = 0; i < allCities.length; i++) {\n      let txtValue = allCities[i].name;\n      if (txtValue.toUpperCase().indexOf(filter) > -1) {\n        tempCities.push(txtValue);\n      }\n    }\n    setSuggestion(tempCities);\n  }, [search, cities]);\n\n  function addCity(myCity: string) {\n    // console.log(\"The city added is :\"+myCity)\n    let newCity: City;\n    axios\n      .get(\n        `http://api.openweathermap.org/data/2.5/weather?q=${myCity}&appid=e899757c1162bf7b2b2684a0b2b8f5cc&units=metric`\n      )\n      .then((response) => {\n        newCity = {\n          name: response.data.name,\n          longitude: response.data.coord.lon,\n          latitude: response.data.coord.lat,\n          temperature: response.data.main.temp,\n          title: response.data.weather[0].main,\n          timestamp: new Date(response.data.dt * 1000),\n        };\n        setCities([...cities, newCity]);\n        console.log(cities);\n      })\n      .catch((error) => console.log(error));\n  }\n\n  return (\n    <div ref={node}> \n      <div className=\"upperHalf\">\n        <h2>Weather App</h2>\n        <div className=\"drop-down-menu\">\n          <input\n            id=\"myInput\"\n            type=\"text\"\n            placeholder=\"Enter your City Name\"\n            onChange={(event) => setSearch(event.target.value)}\n            onClick={() => loadCities()}\n            autoComplete=\"off\"\n          />\n          <div id=\"myDropdown\" className=\"dropdown-content\">\n            {suggestedCities.map((city) => (\n              <div onClick={() => addCity(city)}>{city}</div>\n            ))}\n          </div>\n        </div>\n      </div>\n      <div className=\"lowerHalf\">\n        {cities.map((city) => (\n          <CityCard key={city.name} city={city} />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default HomeLower;\n"]},"metadata":{},"sourceType":"module"}