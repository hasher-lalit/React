{"ast":null,"code":"var _jsxFileName = \"/Users/lalitkumar/Desktop/Hashedin/React Projects/Assignment-ReactTs/weather-app/src/components/Home/HomeLower.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport CityCard from \"./CityCard\";\nimport \"./Home.css\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction addCity(myCity) {\n  let newCity;\n  axios.get(`http://api.openweathermap.org/data/2.5/weather?q=${myCity}&appid=e899757c1162bf7b2b2684a0b2b8f5cc&units=metric`).then(response => {\n    newCity = {\n      name: response.data.name,\n      longitude: response.data.coord.lon,\n      latitude: response.data.coord.lat,\n      temperature: response.data.main.temp,\n      title: response.data.weather.main,\n      timestamp: new Date(response.data.dt * 1000)\n    };\n    console.log(newCity);\n  }).catch(error => console.log(error));\n}\n\nfunction HomeLower() {\n  _s();\n\n  const [cities, setCities] = useState([]);\n  const [search, setSearch] = useState(\"\");\n\n  const allCities = require(\"indian-cities-json\").cities;\n\n  const [suggestedCities, setSuggestion] = useState([]);\n  useEffect(() => {\n    var filter;\n    filter = search.toUpperCase();\n    setSuggestion(allCities);\n    let tempCities = [];\n\n    for (let i = 0; i < allCities.length; i++) {\n      let txtValue = allCities[i].name;\n\n      if (txtValue.toUpperCase().indexOf(filter) > -1) {\n        tempCities.push(txtValue);\n      }\n    }\n\n    setSuggestion(tempCities);\n  }, [search, allCities]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Weather App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"myDropdown\",\n      className: \"dropdown-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"myInput\",\n        type: \"text\",\n        placeholder: \"Enter your City Name\",\n        onChange: event => setSearch(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), suggestedCities.map(city => /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => addCity(city),\n        children: city\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: cities.map(city => /*#__PURE__*/_jsxDEV(CityCard, {\n        city: city\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n\n_s(HomeLower, \"meRCnQntvYiye774ZR4fo+x+x3U=\");\n\n_c = HomeLower;\nexport default HomeLower;\n\nvar _c;\n\n$RefreshReg$(_c, \"HomeLower\");","map":{"version":3,"sources":["/Users/lalitkumar/Desktop/Hashedin/React Projects/Assignment-ReactTs/weather-app/src/components/Home/HomeLower.tsx"],"names":["React","useState","useEffect","CityCard","axios","addCity","myCity","newCity","get","then","response","name","data","longitude","coord","lon","latitude","lat","temperature","main","temp","title","weather","timestamp","Date","dt","console","log","catch","error","HomeLower","cities","setCities","search","setSearch","allCities","require","suggestedCities","setSuggestion","filter","toUpperCase","tempCities","i","length","txtValue","indexOf","push","event","target","value","map","city"],"mappings":"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","sourcesContent":["import { type } from \"node:os\";\nimport React, { useState, useEffect } from \"react\";\nimport CityCard from \"./CityCard\";\nimport \"./Home.css\";\nimport axios from \"axios\";\nexport interface City {\n  name: string;\n  longitude: number;\n  latitude: number;\n  temperature: number;\n  title: string;\n  timestamp: Date;\n}\nfunction addCity(myCity:string) {\n  let newCity:City;\n  axios.get(`http://api.openweathermap.org/data/2.5/weather?q=${myCity}&appid=e899757c1162bf7b2b2684a0b2b8f5cc&units=metric`)\n  .then(response=>{\n    newCity={\n      name: response.data.name,\n      longitude: response.data.coord.lon,\n      latitude:response.data.coord.lat,\n      temperature: response.data.main.temp,\n      title: response.data.weather.main,\n      timestamp: new Date(response.data.dt*1000)\n    }\n    console.log(newCity)})\n  .catch(error=>console.log(error))\n}\nfunction HomeLower() {\n  const [cities, setCities] = useState<City[]>([]);\n  const [search, setSearch] = useState<string>(\"\");\n  const allCities = require(\"indian-cities-json\").cities;\n  const [suggestedCities, setSuggestion] = useState<string[]>([]);\n\n  useEffect(() => {\n    var filter: string;\n    filter = search.toUpperCase();\n    setSuggestion(allCities);\n    let tempCities = [];\n    for (let i = 0; i < allCities.length; i++) {\n      let txtValue = allCities[i].name;\n      if (txtValue.toUpperCase().indexOf(filter) > -1) {\n        tempCities.push(txtValue);\n      }\n    }\n    setSuggestion(tempCities);\n  }, [search, allCities]);\n  return (\n    <div>\n      <h2>Weather App</h2>\n      <div id=\"myDropdown\" className=\"dropdown-content\">\n        <input\n          id=\"myInput\"\n          type=\"text\"\n          placeholder=\"Enter your City Name\"\n          onChange={(event) => setSearch(event.target.value)}\n        />\n        {suggestedCities.map((city) => (\n          <div onClick={()=>addCity(city)}>{city}</div>\n        ))}\n      </div>\n      <div>\n        {cities.map((city) => (\n          <CityCard city={city}></CityCard>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default HomeLower;\n"]},"metadata":{},"sourceType":"module"}