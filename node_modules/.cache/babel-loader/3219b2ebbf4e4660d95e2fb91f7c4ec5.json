{"ast":null,"code":"var _jsxFileName = \"/Users/lalitkumar/Desktop/Hashedin/React Projects/Assignment-ReactTs/weather-app/src/components/Detail/RightForecast.tsx\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport React, { useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction RightForecast(props) {\n  _s();\n\n  console.log(\"forecast\");\n  useEffect(() => {\n    console.log(\"use effect called\");\n    axios.get(`http://api.openweathermap.org/data/2.5/weather?q=${props.location.state.city}&appid=e899757c1162bf7b2b2684a0b2b8f5cc&units=metric`).then(response => {\n      let temp = response.data;\n      let tempLeft = {\n        temperature: 0,\n        humidity: 0,\n        timestamp: new Date(),\n        name: \"\",\n        title: \"\"\n      };\n      let tempRight = {\n        minTemp: 0,\n        maxTemp: 0,\n        windSpeed: 0,\n        windDirection: \"\",\n        sunsetTime: \"\",\n        sunriseTime: \"\",\n        humidity: 0\n      };\n      tempLeft.temperature = temp.main.temp;\n      tempLeft.humidity = temp.main.humidity;\n      tempLeft.name = props.location.state.city;\n      tempLeft.title = temp.weather[0].main;\n      tempLeft.timestamp = temp.dt;\n      tempRight.minTemp = temp.main.temp_min;\n      tempRight.maxTemp = temp.main.temp_max;\n      tempRight.humidity = temp.main.humidity;\n      tempRight.windSpeed = temp.wind.speed;\n      tempRight.windDirection = temp.wind.deg;\n      tempRight.sunsetTime = temp.sys.sunset;\n      tempRight.sunriseTime = temp.sys.sunrise;\n      console.log(tempLeft);\n      console.log(tempRight);\n      setLeft(tempLeft);\n      setRight(tempRight);\n    }).catch(error => console.log(error));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 10\n  }, this);\n}\n\n_s(RightForecast, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = RightForecast;\nexport default RightForecast;\n\nvar _c;\n\n$RefreshReg$(_c, \"RightForecast\");","map":{"version":3,"sources":["/Users/lalitkumar/Desktop/Hashedin/React Projects/Assignment-ReactTs/weather-app/src/components/Detail/RightForecast.tsx"],"names":["axios","React","useEffect","RightForecast","props","console","log","get","location","state","city","then","response","temp","data","tempLeft","temperature","humidity","timestamp","Date","name","title","tempRight","minTemp","maxTemp","windSpeed","windDirection","sunsetTime","sunriseTime","main","weather","dt","temp_min","temp_max","wind","speed","deg","sys","sunset","sunrise","setLeft","setRight","catch","error"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAA2C,OAA3C;;;AAKA,SAASC,aAAT,CAAuBC,KAAvB,EAAmC;AAAA;;AAC/BC,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACAJ,EAAAA,SAAS,CAAC,MAAM;AACZG,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACAN,IAAAA,KAAK,CACFO,GADH,CAEK,oDAAmDH,KAAK,CAACI,QAAN,CAAeC,KAAf,CAAqBC,IAAK,sDAFlF,EAIGC,IAJH,CAISC,QAAD,IAAc;AAClB,UAAIC,IAAI,GAAGD,QAAQ,CAACE,IAApB;AACA,UAAIC,QAAuB,GAAG;AAC5BC,QAAAA,WAAW,EAAE,CADe;AAE5BC,QAAAA,QAAQ,EAAE,CAFkB;AAG5BC,QAAAA,SAAS,EAAE,IAAIC,IAAJ,EAHiB;AAI5BC,QAAAA,IAAI,EAAE,EAJsB;AAK5BC,QAAAA,KAAK,EAAE;AALqB,OAA9B;AAOA,UAAIC,SAAyB,GAAG;AAC9BC,QAAAA,OAAO,EAAE,CADqB;AAE9BC,QAAAA,OAAO,EAAE,CAFqB;AAG9BC,QAAAA,SAAS,EAAE,CAHmB;AAI9BC,QAAAA,aAAa,EAAE,EAJe;AAK9BC,QAAAA,UAAU,EAAE,EALkB;AAM9BC,QAAAA,WAAW,EAAE,EANiB;AAO9BX,QAAAA,QAAQ,EAAE;AAPoB,OAAhC;AASAF,MAAAA,QAAQ,CAACC,WAAT,GAAuBH,IAAI,CAACgB,IAAL,CAAUhB,IAAjC;AACAE,MAAAA,QAAQ,CAACE,QAAT,GAAoBJ,IAAI,CAACgB,IAAL,CAAUZ,QAA9B;AACAF,MAAAA,QAAQ,CAACK,IAAT,GAAgBhB,KAAK,CAACI,QAAN,CAAeC,KAAf,CAAqBC,IAArC;AACAK,MAAAA,QAAQ,CAACM,KAAT,GAAiBR,IAAI,CAACiB,OAAL,CAAa,CAAb,EAAgBD,IAAjC;AACAd,MAAAA,QAAQ,CAACG,SAAT,GAAqBL,IAAI,CAACkB,EAA1B;AAEAT,MAAAA,SAAS,CAACC,OAAV,GAAoBV,IAAI,CAACgB,IAAL,CAAUG,QAA9B;AACAV,MAAAA,SAAS,CAACE,OAAV,GAAoBX,IAAI,CAACgB,IAAL,CAAUI,QAA9B;AACAX,MAAAA,SAAS,CAACL,QAAV,GAAqBJ,IAAI,CAACgB,IAAL,CAAUZ,QAA/B;AACAK,MAAAA,SAAS,CAACG,SAAV,GAAsBZ,IAAI,CAACqB,IAAL,CAAUC,KAAhC;AACAb,MAAAA,SAAS,CAACI,aAAV,GAA0Bb,IAAI,CAACqB,IAAL,CAAUE,GAApC;AACAd,MAAAA,SAAS,CAACK,UAAV,GAAuBd,IAAI,CAACwB,GAAL,CAASC,MAAhC;AACAhB,MAAAA,SAAS,CAACM,WAAV,GAAwBf,IAAI,CAACwB,GAAL,CAASE,OAAjC;AACAlC,MAAAA,OAAO,CAACC,GAAR,CAAYS,QAAZ;AACAV,MAAAA,OAAO,CAACC,GAAR,CAAYgB,SAAZ;AACAkB,MAAAA,OAAO,CAACzB,QAAD,CAAP;AACA0B,MAAAA,QAAQ,CAACnB,SAAD,CAAR;AACD,KAvCH,EAwCGoB,KAxCH,CAwCUC,KAAD,IAAWtC,OAAO,CAACC,GAAR,CAAYqC,KAAZ,CAxCpB;AAyCD,GA3CM,EA2CJ,EA3CI,CAAT;AA4CF,sBAAO;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;GA/CQxC,a;;KAAAA,a;AAgDT,eAAeA,aAAf","sourcesContent":["import axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport Detail from \"../Detail/Detail\";\nimport Clock from \"../../images/clock.svg\";\nimport { RightViewForecast } from \"../Home/CityDTO\";\nfunction RightForecast(props: any) {\n    console.log(\"forecast\");\n    useEffect(() => {\n        console.log(\"use effect called\");\n        axios\n          .get(\n            `http://api.openweathermap.org/data/2.5/weather?q=${props.location.state.city}&appid=e899757c1162bf7b2b2684a0b2b8f5cc&units=metric`\n          )\n          .then((response) => {\n            let temp = response.data;\n            let tempLeft: LeftViewToday = {\n              temperature: 0,\n              humidity: 0,\n              timestamp: new Date(),\n              name: \"\",\n              title: \"\",\n            };\n            let tempRight: RightViewToday = {\n              minTemp: 0,\n              maxTemp: 0,\n              windSpeed: 0,\n              windDirection: \"\",\n              sunsetTime: \"\",\n              sunriseTime: \"\",\n              humidity: 0,\n            };\n            tempLeft.temperature = temp.main.temp;\n            tempLeft.humidity = temp.main.humidity;\n            tempLeft.name = props.location.state.city;\n            tempLeft.title = temp.weather[0].main;\n            tempLeft.timestamp = temp.dt;\n    \n            tempRight.minTemp = temp.main.temp_min;\n            tempRight.maxTemp = temp.main.temp_max;\n            tempRight.humidity = temp.main.humidity;\n            tempRight.windSpeed = temp.wind.speed;\n            tempRight.windDirection = temp.wind.deg;\n            tempRight.sunsetTime = temp.sys.sunset;\n            tempRight.sunriseTime = temp.sys.sunrise;\n            console.log(tempLeft);\n            console.log(tempRight);\n            setLeft(tempLeft);\n            setRight(tempRight);\n          })\n          .catch((error) => console.log(error));\n      }, []);\n  return <div></div>;\n}\nexport default RightForecast;\n"]},"metadata":{},"sourceType":"module"}