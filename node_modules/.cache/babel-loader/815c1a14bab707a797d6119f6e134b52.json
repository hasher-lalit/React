{"ast":null,"code":"var _jsxFileName = \"/Users/lalitkumar/Desktop/Hashedin/React Projects/Assignment-ReactTs/weather-app/src/components/Detail/RightHistory.tsx\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport Clock from \"../../images/clock.svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction RightHistory(props) {\n  _s();\n\n  const dateUnix = Math.round(new Date().getTime() / 1000);\n  const [history, setHistory] = useState([]);\n  var days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n  useEffect(() => {\n    console.log(\"use effect\");\n    tempFun();\n\n    async function tempFun() {\n      for (let i = 1; i <= 5; i++) {\n        await axios.get(`https://api.openweathermap.org/data/2.5/onecall/timemachine?lat=${props.lat}&lon=${props.lon}&dt=${dateUnix - 10 - i * 86400}&appid=a9c7a346f3196bdf3072d1b5efdb5a34`).then(response => {\n          const newDate = new Date(props.props.timestamp * 1000);\n          var date = newDate;\n          var hours = date.getHours() > 12 ? date.getHours() - 12 : date.getHours();\n          var ampm = date.getHours() > 12 ? \"pm\" : \"am\";\n          var minutes = \"0\" + date.getMinutes();\n          var formattedTime = hours + \":\" + minutes.substr(-2);\n          let THistory = response.data.current;\n          setHistory(history => [...history, {\n            sunriseTime: THistory.sunrise,\n            sunsetTime: THistory.sunset,\n            temperature: THistory.temp,\n            day: days[new Date(THistory.dt * 1000).getDay()]\n          }]);\n        }).catch(error => console.log(error));\n      }\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"RightSideBottom\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"HeaderTitle\",\n      children: \"History\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), history.map(day => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"RightCard\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: day.day\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"lclockImgCard\",\n        src: Clock,\n        alt: \"Clock\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Sunrise Time \", day.sunriseTime]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Sunset Time \", day.sunsetTime]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this)]\n    }, day.day, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n\n_s(RightHistory, \"PUqjgfw0ccPwtx6QxD6fWqJYeMQ=\");\n\n_c = RightHistory;\n\nfunction formatTime(newDate) {\n  var date = newDate;\n  var hours = date.getHours() > 12 ? date.getHours() - 12 : date.getHours();\n  var ampm = date.getHours() > 12 ? \" pm\" : \" am\";\n  var minutes = \"0\" + date.getMinutes();\n  var formattedTime = hours + \":\" + minutes.substr(-2) + ampm;\n}\n\nexport default RightHistory;\n\nvar _c;\n\n$RefreshReg$(_c, \"RightHistory\");","map":{"version":3,"sources":["/Users/lalitkumar/Desktop/Hashedin/React Projects/Assignment-ReactTs/weather-app/src/components/Detail/RightHistory.tsx"],"names":["axios","React","useEffect","useState","RightHistory","props","dateUnix","Math","round","Date","getTime","history","setHistory","days","console","log","tempFun","i","get","lat","lon","then","response","newDate","timestamp","date","hours","getHours","ampm","minutes","getMinutes","formattedTime","substr","THistory","data","current","sunriseTime","sunrise","sunsetTime","sunset","temperature","temp","day","dt","getDay","catch","error","map","Clock","formatTime"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport Detail from \"../Detail/Detail\";\nimport Clock from \"../../images/clock.svg\";\nimport { RightViewForecast, RightViewHistory } from \"../Home/CityDTO\";\nfunction RightHistory(props: any) {\n  const dateUnix = Math.round(new Date().getTime() / 1000);\n  const [history, setHistory] = useState<RightViewHistory[]>([]);\n  var days = [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n  ];\n  useEffect(() => {\n    console.log(\"use effect\");\n    tempFun();\n    async function tempFun() {\n      for (let i = 1; i <= 5; i++) {\n        await axios\n          .get(\n            `https://api.openweathermap.org/data/2.5/onecall/timemachine?lat=${\n              props.lat\n            }&lon=${props.lon}&dt=${\n              dateUnix - 10 - i * 86400\n            }&appid=a9c7a346f3196bdf3072d1b5efdb5a34`\n          )\n          .then((response) => {\n            const newDate = new Date(props.props.timestamp * 1000);\n            var date = newDate;\n            var hours =\n              date.getHours() > 12 ? date.getHours() - 12 : date.getHours();\n            var ampm = date.getHours() > 12 ? \"pm\" : \"am\";\n            var minutes = \"0\" + date.getMinutes();\n            var formattedTime = hours + \":\" + minutes.substr(-2);\n            let THistory = response.data.current;\n            setHistory((history) => [\n              ...history,\n              {\n                sunriseTime: THistory.sunrise,\n                sunsetTime: THistory.sunset,\n                temperature: THistory.temp,\n                day: days[new Date(THistory.dt * 1000).getDay()],\n              },\n            ]);\n          })\n          .catch((error) => console.log(error));\n      }\n    }\n  }, []);\n  return (\n    <div className=\"RightSideBottom\">\n      <div className=\"HeaderTitle\">History</div>\n      {history.map((day) => (\n        <div key={day.day} className=\"RightCard\">\n          <div>{day.day}</div>\n          <img className=\"lclockImgCard\" src={Clock} alt=\"Clock\" />\n          <div>Sunrise Time {day.sunriseTime}</div>\n          <div>Sunset Time {day.sunsetTime}</div>\n        </div>\n      ))}\n    </div>\n  );\n}\nfunction formatTime(newDate: Date) {\n  var date = newDate;\n  var hours = date.getHours() > 12 ? date.getHours() - 12 : date.getHours();\n  var ampm = date.getHours() > 12 ? \" pm\" : \" am\";\n  var minutes = \"0\" + date.getMinutes();\n  var formattedTime = hours + \":\" + minutes.substr(-2) + ampm;\n}\nexport default RightHistory;\n"]},"metadata":{},"sourceType":"module"}